;; The first three lines of this file were inserted by DrScheme. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname football_transfer) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ())))
;;==========================================================================
;; player represents a soccer player
;; name: string - the name of the soccer player
;; stamina: number - the stamina of the player
;; speed: number - the speed (running or reflexes)
;; accuracy: number - of shots, passes, or saves
;; price: number - needed to transfer the player
(define-struct player (name stamina speed accuracy price))

;;==========================================================================
;; value represents the value of a player,
;; as determined by some appropriate function
;; vplayer: player - the player structure
;; score: number - the rating for the player
(define-struct value (vplayer score))


;;===Example players===
(define ar (make-player "Alexander Reibold" 71 71 70 25000))
(define ea (make-player "Echendu Adiele" 75 72 76 175000))
(define bs (make-player "Bastian Schweinsteiger" 88 85 91 3200000))
(define ab (make-player "Andreas Baufeldt" 74 75 71 180000))

;;===Example list of players===
(define my-players (list ar ea bs ab))


;;==========================================================================
;; contract: player->value: player (player -> number) -> value
;; purpose: calculates the profit of a player
;; example: (player->value (make-player "Echendu Adiele" 75 72 76 175000) player-stamina) 
;;          -> (make-value (make-player "Echendu Adiele" 75 72 76 175000) 75)
(define (player->value a-player eval-fun)
  (make-value a-player (eval-fun a-player)))

;;===Tests: player->value===
(check-expect (player->value ar player-stamina) (make-value ar 71))
(check-expect (player->value ea player-speed) (make-value ea 72))

;;==========================================================================
;; contract: value-sum: (listof player) (player -> number) -> number
;; purpose: summarize the a specific atribiute of a list of players
;; example: 
(define (value-sum player-list eval-fun)
  (foldl (lambda (a-player akku) (+ akku (eval-fun a-player))) 0 player-list))

;; Tests
(check-expect (value-sum my-players player-stamina) 308)
(check-expect (value-sum my-players player-speed) 303)


;;==========================================================================
;; contract: find-best-players: (listof player) number (player -> number) -> (listof player)
;; purpose: find the best combination of players for a specific attribuite
(define (find-best-players players max-cost eval-fun)
  (local
    (
     (define cheap-players 
       (filter (lambda (a-player) 
                 (< (player-price a-player) max-cost)) 
               players))
     
     ;; contract: find-best: (listof player) (listof player) -> (listof (listof player))
     ;; purpose: find possible solutions of combinations of players
     (define (find-best players erg-list)
       (local
         ((define erg-price (value-sum erg-list player-price))
          (define iter-players players)) ;; needed to iterate over the player in the foldl function
         (cond
           [(and (empty? players) (< erg-price max-cost)) (list erg-list)]
           [(< erg-price max-cost)            
            (foldl (lambda (a-player akku)
                     (begin0
                       (append
                        akku
                        (list erg-list)
                        (find-best (rest iter-players) (append erg-list (list a-player))))
                     (set! iter-players (rest iter-players)))) ;; keine ahnung wie man die aufgabe ohne set lÃ¶sen kann ...
                   empty players)]
           [else empty])))
     
     (define possible-solutions (find-best cheap-players empty))
     
     (define best-solution 
       (argmax (lambda (a-solution) (value-sum a-solution eval-fun)) possible-solutions))) ;;===endof-local-define-block===
    
    best-solution ;; return value
    ))

;; The following tests should be passed
(check-expect (find-best-players my-players 210000 player-speed) (list ar ab))
(check-expect (find-best-players my-players 210000 player-stamina) (list ar ea))
(check-expect (find-best-players my-players 210000 player-accuracy) (list ar ea))
(check-expect (find-best-players my-players 360000 player-speed) (list ea ab))
(check-expect (find-best-players my-players 350000 player-stamina) (list ar ea))
(check-expect (find-best-players my-players 340000 player-accuracy) (list ar ea))
(check-expect (find-best-players my-players 400000 player-speed) (list ar ea ab))
(check-expect (find-best-players my-players 400000 player-stamina) (list ar ea ab))
(check-expect (find-best-players my-players 400000 player-accuracy) (list ar ea ab))